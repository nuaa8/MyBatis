<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--  核心配置文件中的标签必须按照固定的顺序：
        properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorF
actory?,plugins?,environments?,databaseIdProvider?,mappers?

      -->
    <!-- 引入properties文件 -->
    <properties resource="jdbc.properties"/>
    <!--    配置连接数据库的环境-->
    <!--
        environments：设置多个连接数据库的环境
        属性：
        default：设置默认使用的环境的id
    -->

<!--    <typeAliases >-->
<!--        <typeAlias type="com.atguigu.mybatis.pojo.User" alias="User" />-->
<!--    </typeAliases>-->
    <!-- 给全类名设置别名，如果alias不设置，则默认别名是  pojo类名（大小写都行），若果设置，则按照设置的名为 别名-->

<!--    <typeAliases>-->
                <!--
                typeAlias：设置某个具体的类型的别名
                属性：
                type：需要设置别名的类型的全类名
                alias：设置此类型的别名，若不设置此属性，该类型拥有默认的别名，即类名且不区分大小
                写
                若设置此属性，此时该类型的别名只能使用alias所设置的值
                -->
                <!--<typeAlias type="com.atguigu.mybatis.bean.User"></typeAlias>-->
                <!--<typeAlias type="com.atguigu.mybatis.bean.User" alias="abc">
                </typeAlias>-->
                <!--以包为单位，设置改包下所有的类型都拥有默认的别名，即  类名  且不区分大小写-->
        <!--        <package name="com.atguigu.mybatis.bean"/>-->
<!--    </typeAliases>-->
    <environments default="development">
        <!--
            environment：设置具体的连接数据库的环境信息
            属性：
            id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，
            表示默认使用的环境
            -->
        <environment id="development">
            <!--
            transactionManager：设置事务管理方式
            属性：
            type：设置事务管理方式，type="JDBC|MANAGED"
            type="JDBC"：设置当前环境的事务管理都必须手动处理
            type="MANAGED"：设置事务被管理，例如spring中的AOP
            -->

            <transactionManager type="JDBC"/>
            <!--    数据源
                属性：
                    type：设置数据源的类型，type="POOLED|UNPOOLED|JNDI"
                    type="POOLED"：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从
                    缓存中直接获取，不需要重新创建
                    type="UNPOOLED"：不使用数据库连接池，即每次使用连接都需要重新创建
                    type="JNDI"：调用上下文中的数据源

            -->
            <dataSource type="POOLED">
                <!--设置驱动类的全类名-->
                <property name="driver" value="${jdbc.driver}"/>
                <!--设置连接数据库的连接地址-->
                <property name="url" value="${jdbc.url}"/>
                <!--设置连接数据库的用户名-->
                <property name="username" value="${jdbc.username}"/>
                <!--设置连接数据库的密码-->
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--    引入映射文件    ，映射文件和mapper接口是相对应的，一个mapper接口操作是一张表，一张表对应实体类，实体类对应mapper接口，mapper接口对应映射文件。（重点，重点，重点）
        以包为单位，将包下所有的映射文件引入核心配置文件
        注意：
        1.mapper接口所在的包要和映射文件所在的包一致
        2.mapper接口要和映射文件的名字一致
       <package name="com.atguigu.mybatis.mapper"/>
    -->
    <mappers>  <!-- mappers 元素则包含了一组映射器（mapper），这些映射器的 XML 映射文件包含了 SQL 代码和映射定义信息。映射器 是一些绑定映射语句的接口。映射器接口的实例是从 SqlSession 中获得的。-->
        <mapper resource="mappers/UserMapper.xml"/>

    </mappers>
</configuration>
